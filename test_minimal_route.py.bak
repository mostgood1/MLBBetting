#!/usr/bin/env python3
"""Test minimal Flask app with just the betting analysis route"""

from flask import Flask, jsonify
import json
import os
import glob
from datetime import datetime
import logging
import traceback

app = Flask(__name__)

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@app.route('/api/betting-recommendations-analysis')
def api_betting_recommendations_analysis():
    """API endpoint for comprehensive betting recommendations analysis"""
    try:
        logger.info("Starting comprehensive betting recommendations analysis...")
        
        # Get available dates from betting recommendations files
        betting_rec_files = []
        final_scores_files = []
        
        rec_pattern = "data/betting_recommendations_*.json"
        scores_pattern = "data/final_scores_*.json"
        
        for file_path in glob.glob(rec_pattern):
            if os.path.exists(file_path):
                date_part = file_path.split('_')[-1].replace('.json', '')
                betting_rec_files.append(date_part)
        
        for file_path in glob.glob(scores_pattern):
            if os.path.exists(file_path):
                date_part = file_path.split('_')[-1].replace('.json', '')
                final_scores_files.append(date_part)
        
        # Find dates that have both betting recommendations and final scores
        common_dates = list(set(betting_rec_files) & set(final_scores_files))
        common_dates.sort()
        
        logger.info(f"Found {len(common_dates)} dates with both betting recommendations and final scores")
        
        # Return basic analysis result
        analysis_result = {
            'success': True,
            'analysis_date': datetime.now().isoformat(),
            'total_days_analyzed': len(common_dates),
            'overall_metrics': {
                'total_recommendations': 0,
                'correct_recommendations': 0,
                'overall_accuracy': 0.0,
                'total_expected_value': 0.0,
                'winning_expected_value': 0.0,
                'overall_roi': 0.0
            },
            'message': 'Basic analysis endpoint working'
        }
        
        return jsonify(analysis_result)
        
    except Exception as e:
        logger.error(f"Error in betting recommendations analysis: {e}")
        logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'error': str(e),
            'message': 'Failed to analyze betting recommendations'
        })

if __name__ == '__main__':
    # Test the route
    with app.test_client() as client:
        response = client.get('/api/betting-recommendations-analysis')
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            data = response.get_json()
            print(f"Success: {data}")
        else:
            print(f"Error: {response.data.decode()}")
