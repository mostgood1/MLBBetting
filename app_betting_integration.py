"""
App Betting Integration Module
Provides betting recommendations for the main Flask application
"""
import os
import sys
import logging
from typing import Dict, Tuple, List
from datetime import datetime

# Setup logging
logger = logging.getLogger(__name__)

def get_app_betting_recommendations() -> Tuple[Dict, List]:
    """
    Get betting recommendations for the main app
    Returns: (raw_recommendations_dict, frontend_recommendations_list)
    """
    try:
        # Import unified betting engine
        from unified_betting_engine import UnifiedBettingEngine
        
        logger.info("üéØ Loading betting recommendations via UnifiedBettingEngine")
        
        # Create and run the engine
        engine = UnifiedBettingEngine()
        recommendations = engine.generate_recommendations()
        
        if not recommendations or 'games' not in recommendations:
            logger.warning("‚ö†Ô∏è No recommendations generated by unified engine")
            return {}, []
        
        # Extract the games recommendations
        raw_recommendations = recommendations['games']
        
        # Convert to frontend format (list of individual bets)
        frontend_recommendations = []
        
        for game_key, game_data in raw_recommendations.items():
            value_bets = game_data.get('value_bets', [])
            for bet in value_bets:
                frontend_recommendations.append({
                    'game': game_key,
                    'type': bet.get('type', ''),
                    'recommendation': bet.get('recommendation', ''),
                    'odds': bet.get('american_odds', ''),
                    'confidence': bet.get('confidence', 'medium'),
                    'expected_value': bet.get('expected_value', 0),
                    'win_probability': bet.get('win_probability', 0),
                    'reasoning': bet.get('reasoning', '')
                })
        
        logger.info(f"‚úÖ Loaded {len(frontend_recommendations)} total betting recommendations from {len(raw_recommendations)} games")
        
        return raw_recommendations, frontend_recommendations
        
    except ImportError as e:
        logger.error(f"‚ùå Failed to import unified betting engine: {e}")
        return {}, []
    except Exception as e:
        logger.error(f"‚ùå Error getting app betting recommendations: {e}")
        return {}, []

def get_unified_betting_recommendations() -> Dict:
    """
    Get unified betting recommendations (alternative interface)
    Returns: raw recommendations dict
    """
    try:
        raw_recommendations, _ = get_app_betting_recommendations()
        return raw_recommendations
    except Exception as e:
        logger.error(f"‚ùå Error getting unified betting recommendations: {e}")
        return {}

def get_todays_betting_opportunities() -> Dict:
    """
    Get today's betting opportunities for Kelly Criterion analysis
    """
    try:
        raw_recommendations, _ = get_app_betting_recommendations()
        
        # Convert to format expected by Kelly system
        opportunities = {}
        
        for game_key, game_data in raw_recommendations.items():
            game_opportunities = []
            
            for bet in game_data.get('value_bets', []):
                opportunity = {
                    'type': bet.get('type', ''),
                    'side': bet.get('recommendation', ''),
                    'odds': bet.get('american_odds', ''),
                    'win_probability': bet.get('win_probability', 0),
                    'confidence': bet.get('confidence', 'medium'),
                    'expected_value': bet.get('expected_value', 0)
                }
                game_opportunities.append(opportunity)
            
            if game_opportunities:
                opportunities[game_key] = game_opportunities
        
        logger.info(f"üéØ Found {len(opportunities)} games with betting opportunities")
        return opportunities
        
    except Exception as e:
        logger.error(f"‚ùå Error getting today's betting opportunities: {e}")
        return {}
